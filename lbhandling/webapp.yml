---
# This playbook will set up a simple web application. If a change happens to
# the Apache configuration, then we pull it out of the load balancer before
# restarting Apache

# We want to gather information for the load balancers, so we can refer to it.

- hosts: loadbalancer
  name: Get loadbalancer info
  tasks: []  # Empty task list.

# We target the web group to deploy our application
- hosts: web
  name: Set up and maintain Web App Setup
  serial: 1
  vars:
    httpd_port: 80
    allow_override: None
  tasks:

    - name: Add our custom hostfile
      template:
        src: templates/hosts.j2
        dest: /etc/hosts
        owner: root
        group: root
        mode: 0644

    - name: Install NTP
      yum:
        name: ntp
        state: present

    - name: Start NTP
      service:
        name: ntpd
        state: started
        enabled: true

    - name: Install Apache and mod_php
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - httpd
        - mod_php

    - name: Lay down correct config
      template:
        src: templates/httpd.conf.j2
        dest: /etc/httpd/conf/httpd.conf
        owner: root
        group: root
        mode: 0644
      notify:
        - restart app server

    - name: deploy simple index file
      template:
        src: templates/index.html.j2
        dest: /var/www/html/index.html
        owner: root
        group: root
        mode: 0644

    - name: deploy application
      template:
        src: templates/app.php.j2
        dest: /var/www/html/app.php
        owner: root
        group: root
        mode: 0644

    - name: Get correct firewall rules in place
      firewalld:
        service: http
        permanent: true
        state: enabled
      notify: firewall reload

    - name: Verify Apache is running.
      service:
        name: httpd
        enabled: true
        state: started

  handlers:

    - name: firewall reload
      service:
        name: firewalld
        state: reloaded

    - name: Drop out of Load Balancer
      haproxy:
        state: disabled
        backend: web
        host: "{{ ansible_hostname }}"
        socket: /var/lib/haproxy/stats
        wait: true
      delegate_to: "{{ item }}"
      with_items: "{{ groups.loadbalancer }}"
      listen: "restart app server"

    - name: Restart Apache
      service:
        name: httpd
        state: restarted
      listen: "restart app server"

    - name: Add back into Load Balancer
      haproxy:
        state: enabled
        backend: web
        host: "{{ ansible_hostname }}"
        socket: /var/lib/haproxy/stats
        wait: true
      delegate_to: "{{ item }}"
      with_items: "{{ groups.loadbalancer }}"
      listen: "restart app server"
